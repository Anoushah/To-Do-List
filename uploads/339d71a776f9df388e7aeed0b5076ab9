#include <pthread.h>
#include <semaphore.h>
#include <stdio.h>
#include <unistd.h>

#define NUM_PHILOSOPHERS 5
#define THINKING 0
#define HUNGRY 1
#define EATING 2

int state[NUM_PHILOSOPHERS];
pthread_mutex_t mutex;
pthread_cond_t cond[NUM_PHILOSOPHERS];

void take_forks(int philosopher_id) {
  pthread_mutex_lock(&mutex);
  state[philosopher_id] = HUNGRY;
  printf("Philosopher %d is hungry.\n", philosopher_id);
  while (state[(philosopher_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS] == EATING ||
         state[(philosopher_id + 1) % NUM_PHILOSOPHERS] == EATING) {
    pthread_cond_wait(&cond[philosopher_id], &mutex);
  }
  state[philosopher_id] = EATING;
  printf("Philosopher %d is eating.\n", philosopher_id);
  pthread_mutex_unlock(&mutex);
}

void put_forks(int philosopher_id) {
  pthread_mutex_lock(&mutex);
  state[philosopher_id] = THINKING;
  printf("Philosopher %d is thinking.\n", philosopher_id);
  pthread_cond_signal(&cond[(philosopher_id + NUM_PHILOSOPHERS - 1) % NUM_PHILOSOPHERS]);
  pthread_cond_signal(&cond[(philosopher_id + 1) % NUM_PHILOSOPHERS]);
  pthread_mutex_unlock(&mutex);
}

void *philosopher(void *arg) {
  int philosopher_id = *(int *)arg;
  while (1) {
    sleep(1);
    take_forks(philosopher_id);
    sleep(1);
    put_forks(philosopher_id);
  }
}

int main() {
  pthread_t threads[NUM_PHILOSOPHERS];
  int i;
  int philosopher_id[NUM_PHILOSOPHERS];
  pthread_mutex_init(&mutex, NULL);
  for (i = 0; i < NUM_PHILOSOPHERS; i++) {
    pthread_cond_init(&cond[i], NULL);
  }
  for (i = 0; i < NUM_PHILOSOPHERS; i++) {
    philosopher_id[i] = i;
    pthread_create(&threads[i], NULL, philosopher, &philosopher_id[i]);
  }
  for (i = 0; i < NUM_PHILOSOPHERS; i++) {
    pthread_join(threads[i], NULL);
  }
  return 0


